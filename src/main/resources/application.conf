akka {

  #loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during AkkaApplication startup
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    
    debug {
       unhandled = on
    }
    
    #only for test
    #serialize-messages = on
    
    #only for test
    #serialize-creators = on
    
    serialization-bindings {
      "it.dtk.actor.textpro.TextProActor" = proto
      "scala.collection.MapLike" = java
    }
    
    deployment {
    
      "/receptionist/nlpController/textProActor" {
        remote = "akka.tcp://TextProSystem@10.0.0.10:2552"
      }
      
      "/receptionist/nlpController/textProActorPool" {
        router = round-robin-pool
        nr-of-instances = 2
        target.nodes = ["akka.tcp://TextProSystem@10.0.0.10:2552"]
      }
      
      "/receptionist/controller/textProActorPool" {
        router = round-robin-pool
        nr-of-instances = 2
        target.nodes = ["akka.tcp://TextProSystem@10.0.0.10:2552"]
      }
    }
  }

  remote {
    netty.tcp {
      hostname = "10.0.0.11"
      port = 2554
      send-buffer-size = 4096000b
      receive-buffer-size = 4096000b
      maximum-frame-size = 2048000b
    }
  }
}
